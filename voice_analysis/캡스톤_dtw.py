# -*- coding: utf-8 -*-
"""캡스톤-dtw.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iPeWIGMcOYPo6IqlzbjyQO4tW-NcOr-p
"""

!pip install librosa scipy

import librosa
import numpy as np
from scipy.spatial.distance import cdist
from scipy.optimize import linear_sum_assignment

def load_features(file_path):
    """오디오 파일에서 MFCC와 Delta-MFCC를 추출합니다."""
    y, sr = librosa.load(file_path, sr=None)

    # MFCC 및 Delta-MFCC 추출
    mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=13)
    delta_mfcc = librosa.feature.delta(mfcc)

    # 두 특징을 결합하여 (프레임 수, 26차원) 형태로 반환
    combined_features = np.hstack((mfcc.T, delta_mfcc.T))
    return combined_features

def weighted_dtw_distance(feature1, feature2, pitch_weight=5.0, rhythm_weight=2.0):
    """두 음성 특징 간의 DTW 거리 계산 (억양과 리듬에 가중치 추가)."""
    # MFCC 거리 계산
    mfcc_dist_matrix = cdist(feature1[:, :13], feature2[:, :13], metric='cosine')  # MFCC 거리
    delta_dist_matrix = cdist(feature1[:, 13:], feature2[:, 13:], metric='cosine')  # Delta-MFCC 거리

    # 전체 거리 행렬 생성: 억양(pitch)과 리듬(rhythm)에 가중치를 부여
    combined_dist = pitch_weight * mfcc_dist_matrix + rhythm_weight * delta_dist_matrix

    # 헝가리안 알고리즘으로 최적 경로 찾기
    row_ind, col_ind = linear_sum_assignment(combined_dist)

    # 최적 경로의 총 거리 계산
    total_distance = combined_dist[row_ind, col_ind].sum()
    return total_distance

def calculate_similarity(dtw_dist, max_possible_dist):
    """DTW 거리를 비선형 함수로 유사도로 변환."""
    # 거리값을 지수 함수로 정규화
    normalized_score = np.exp(-dtw_dist / max_possible_dist)

    # 유사도를 0~100점 사이로 매핑 (유사도 조정)
    similarity_score = 100 * (normalized_score ** 1.5)  # 조정된 지수로 유사도 증가
    # 최소 0점, 최대 100점으로 제한
    return min(100, max(0, similarity_score))

# 두 음성 파일의 특징을 로드
feature1 = load_features("test_ji.wav")
feature2 = load_features("seoul_test4.mp3")

# 두 음성 파일 간의 DTW 거리 계산
distance = weighted_dtw_distance(feature1, feature2)

# 최대 예상 거리: 두 파일 길이의 합으로 설정
max_distance = len(feature1) + len(feature2)

# 유사도 점수 계산
similarity = calculate_similarity(distance, max_distance)

print(f"DTW Distance: {distance}")
print(f"Similarity Score: {similarity:.2f}점")